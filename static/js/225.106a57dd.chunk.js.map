{"version":3,"file":"static/js/225.106a57dd.chunk.js","mappings":"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","sources":["services/apiServices.js","pages/Home.jsx"],"sourcesContent":["\n\nimport axios from \"axios\";\n\nconst backendUri=\"https://realtime-chatting-app-qnm1.onrender.com/\"\nconst searchSuggestion=async(name)=>{\n    try {\n        const response = await axios.get(`${backendUri}getUser/${name}`);\n        return response.data; // Return the fetched data\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        return []; // Return null or handle the error as needed\n      }\n    \n}\n\nconst loadChat=async()=>{\n  try{\n    const response=await axios.get(`${backendUri}`,{withCredentials:true})\n    const data=response.data;\n    return data;\n  }\n  catch(err){\n    //make then reload again\n    return null\n    console.log(err)\n  }\n}\n\nconst loadMsg=async(id)=>{\n  try{\n      const response=await axios.get(`${backendUri}select/${id}`,{withCredentials:true})\n      const data=response.data\n      return data;\n  }\n  catch(err){\n    console.log(err)\n  }\n}\nexport {searchSuggestion,loadChat,loadMsg}","import React, { useEffect, useState ,useRef} from 'react';\nimport { loadChat, loadMsg, searchSuggestion } from '../services/apiServices';\nimport { io } from 'socket.io-client';\nimport avatar from '../assets/avatar.jpg';\n\nconst socket = io('https://realtime-chatting-app-qnm1.onrender.com/');\n\nconst Home = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typedMsg, setTypedMsg] = useState('');\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [searchedResult, setSearchedResult] = useState([]);\n  const [chatArray, setChatArray] = useState([]);\n  const [user, setUser] = useState(null);\n  const [msgData, setMsgData] = useState([]);\n  const messagesEndRef=useRef(null)\n  useEffect(()=>{\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  },[msgData])\n\n  useEffect(() => {\n    // Fetch user data only on component mount\n    const fetchUserData = async () => {\n      const userData = await loadChat();\n      if(userData){\n      socket.emit('login', { userid: userData.user._id });\n      setChatArray(userData.chatArray);\n      setUser(userData.user);\n      }\n     \n    };\n\n    fetchUserData();\n  }, []);\n\n  useEffect(()=>{\n     \n     socket.on('receivePrivateMsg', (data) => {\n      \n      if (user&&(data.sender==selectedContact._id)) {\n\n          const newMessage = {\n          receiver: user._id,\n          sender: data.sender,\n          message: data.message,\n        };\n        \n        setMsgData((previousMsgData) => [...previousMsgData, newMessage]);\n      }\n    });\n    return () => {\n      socket.off('receivePrivateMsg');\n    };\n  },[user,selectedContact])\n  \n\n\n  const handleSearchSuggestion = async (e) => {\n    setSearchTerm(e.target.value);\n    if (e.target.value.trim() === '') {\n      setSearchedResult([]);\n    } else {\n      const data = await searchSuggestion(e.target.value);\n      setSearchedResult(data);\n    }\n  };\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    console.log('Searching for:', searchTerm);\n  };\n\n  const handleSend = (e) => {\n    e.preventDefault();\n    if(typedMsg!=''){\n       \n    if (!selectedContact || !user) return;\n\n    socket.emit('privateMsg', { data: { sender: user._id, receiver: selectedContact._id, message: typedMsg } });\n\n    const newMessage = {\n      receiver: selectedContact._id,\n      sender: user._id,\n      message: typedMsg,\n    };\n\n    setTypedMsg('');\n    setMsgData((previousMsgData) => [...previousMsgData, newMessage]);\n    }\n   \n  };\n\n  const selectContact = async (contact) => {\n    const data = await loadMsg(contact._id);\n    setTypedMsg('');\n    setSearchTerm('');\n    setSearchedResult([])\n    setMsgData(data.messageArray);\n    setSelectedContact(contact);\n  };\n    \n      return (\n        <div className='bg-gradient-to-r from-gray-400 to-gray-200 flex justify-center items-center min-h-screen'>\n          <div className=\"flex flex-col h-[85vh] bg-gradient-to-r from-gray-400 to-gray-200 rounded-lg shadow-[0_10px_20px_rgba(255,0,0,1)] p-6 w-full max-w-6xl\">\n            <div className=\"top bg-gradient-to-r from-gray-400 to-gray-200 p-4 rounded-t-lg flex justify-between items-center flex-col sm:flex-row\">\n              <label className=\"text-white text-lg font-semibold\">Welcome</label>\n              <form className=\"searchForm flex items-center relative mt-2\" onSubmit={handleSearch} id=\"searchForm\">\n                <input\n                  className=\"p-2 rounded-l-lg bg-gray-100 text-black focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  type=\"text\"\n                  placeholder=\"Search\"\n                  value={searchTerm}\n                  onChange={handleSearchSuggestion}\n                  id=\"searchBox\"\n                  name=\"user\"\n                />\n                <button type=\"submit\" id=\"searchBtn\" className=\"bg-blue-600 text-white p-2 rounded-r-lg hover:bg-blue-700 transition-colors\">\n                  Search\n                </button>\n                <div className=\"searchResult absolute bg-gray-700 text-white top-11 rounded-lg shadow-lg w-full\">\n                  {\n                    searchedResult.map((user)=>(\n                      <button key={user._id} className=\" bg-gray-300 w-full text-left text-blue-500 rounded hover:text-blue-700 p-4 border\" \n\n                      onClick={() =>  {\n                        console.log(\"hey q\");\n                        selectContact(user)\n                       }}>\n                      {user.fName} {user.lName}\n                  </button>\n                    ))\n                  }\n                </div>\n              </form>\n            </div>\n            <div className=\"main flex flex-row flex-grow w-full\">\n              <div className=\"sidebar bg-gray-100 h-full w-1/3 sm:w-1/4 p-4 flex flex-col  rounded-l-lg overflow-y-auto\">\n                <div className=\"sidebar-header mb-4 \">\n                  <h2 className=\"text-gray-700 text-lg font-semibold\">Contacts</h2>\n                </div>\n                <div className=\"flex-grow h-2 overflow-y-auto\">\n                  {chatArray.map((user) => (\n                    <div key={user._id} className=\"contact flex items-center mb-4 p-1 sm:p-2 bg-white rounded-lg shadow-xl\">\n                      <img src={avatar} alt=\"Avatar\" className=\"rounded-full w-4 h-4 sm:w-12 sm:h-12 \" />\n                      <form className=\"flex-grow ml-1 sm:ml-4\" onSubmit={(e) => { e.preventDefault(); selectContact(user); }}>\n                        <button type=\"submit\" className=\"text-gray-800 font-semibold hover:text-blue-500 transition-colors text-xs sm:text-xl\">\n                          {user.fName} {user.lName}\n                        </button>\n                      </form>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div id=\"chat-area\" className=\" bg-gradient-to-r from-gray-200 to-white p-6 rounded-r-lg flex flex-col flex-grow w-2/3 sm:w-3/4 lg:mt-0 \">\n                {selectedContact ? (\n                  <div className='flex flex-grow flex-col '>\n                  <p>Chat with: {selectedContact.fName}</p>\n                  <div className='flex-grow flex flex-col h-1 overflow-y-auto  mt-2 mb-2'>\n                    {msgData.map((msg)=>(\n\n                        msg.sender === user._id?(\n                        <div key={msg._id} className='bg-gray-300 m-1 sm:m-4 text-xs sm:text-lg   p-1 sm:p-3 self-end rounded w-fit break-words max-w-[60%] ' >{msg.message}</div>\n                        ):(\n                        <div key={msg._id} className='bg-gray-300 m-1 sm:m-4 text-xs sm:text-lg   p-1 sm:p-3  rounded w-fit break-words max-w-[60%] ' >{msg.message}</div>\n                        )\n                ))} \n                <div ref={messagesEndRef}></div>\n                  </div>\n                  <form className=\"searchForm flex items-center relative mt-2 sm:mt-0 w-full\" onSubmit={handleSend} id=\"searchForm\">\n                <input\n                  className=\"p-2 grow w-20 text-xs sm:text-lg rounded-l-lg border bg-gray-200 text-black focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  type=\"text\"\n                  placeholder=\"Type your msg here\"\n                  value={typedMsg}\n                  onChange={(e)=>setTypedMsg(e.target.value)}\n                  id=\"msgBox\"\n                  name=\"msg\"\n                />\n                <button type=\"submit\" id=\"sendBtn\" className=\"bg-blue-600 text-white p-2 rounded-r-lg hover:bg-blue-700 transition-colors\">\n                  Send\n                </button>\n              </form>\n                  </div>\n                  \n               \n                ) : (\n                  <p>Select a contact to start chatting</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    };\n    \n    export default Home;\n    \n"],"names":["backendUri","socket","io","Home","searchTerm","setSearchTerm","useState","typedMsg","setTypedMsg","selectedContact","setSelectedContact","searchedResult","setSearchedResult","chatArray","setChatArray","user","setUser","msgData","setMsgData","messagesEndRef","useRef","useEffect","_messagesEndRef$curre","current","scrollIntoView","behavior","async","userData","axios","get","withCredentials","data","err","loadChat","emit","userid","_id","fetchUserData","on","sender","newMessage","receiver","message","previousMsgData","off","selectContact","id","console","log","loadMsg","contact","messageArray","_jsx","className","children","_jsxs","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","trim","name","error","searchSuggestion","map","onClick","fName","lName","src","avatar","alt","msg","ref"],"sourceRoot":""}