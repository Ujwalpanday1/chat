{"version":3,"file":"static/js/73.ce5da696.chunk.js","mappings":"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","sources":["pages/Home.jsx"],"sourcesContent":["import React, { useEffect, useState ,useRef} from 'react';\nimport { loadChat, loadMsg, searchSuggestion } from '../services/apiServices';\nimport { io } from 'socket.io-client';\nimport avatar from '../assets/avatar.jpg';\nimport LoadingPage from './LoadingPage';\n\nconst socket = io('https://realtime-chatting-app-qnm1.onrender.com/');\n\nconst Home = ({setisVerified}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typedMsg, setTypedMsg] = useState('');\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [searchedResult, setSearchedResult] = useState([]);\n  const [chatArray, setChatArray] = useState([]);\n  const [user, setUser] = useState(null);\n  const [msgData, setMsgData] = useState([]);\n  const messagesEndRef=useRef(null)\n  const [loading, setLoading] = useState(true);\n  useEffect(()=>{\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  },[msgData])\n\n  useEffect(() => {\n    // Fetch user data only on component mount\n    const fetchUserData = async () => {\n      const userData = await loadChat();\n      \n      if(userData===\"loadLoadig\"){\n        setLoading(true);\n      }\n      else if(userData){\n      socket.emit('login', { userid: userData.user._id });\n      \n      \n      setChatArray(userData.chatArray);\n      setUser(userData.user);\n      setLoading(false)\n     \n      }\n      else{\n        setisVerified(false)\n        setLoading(false)\n      }\n    };\n\n    fetchUserData();\n  }, []);\n\n  useEffect(()=>{\n     \n     socket.on('receivePrivateMsg', (data) => {\n      \n      if (user&&selectedContact&&(data.sender==selectedContact._id)) {\n\n          const newMessage = {\n          receiver: user._id,\n          sender: data.sender,\n          message: data.message,\n        };\n        \n        setMsgData((previousMsgData) => [...previousMsgData, newMessage]);\n      }\n    });\n    return () => {\n      socket.off('receivePrivateMsg');\n    };\n  },[user,selectedContact])\n  \n\n\n  const handleSearchSuggestion = async (e) => {\n    setSearchTerm(e.target.value);\n    if (e.target.value.trim() === '') {\n      setSearchedResult([]);\n    } else {\n      const data = await searchSuggestion(e.target.value);\n      setSearchedResult(data);\n    }\n  };\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n  };\n\n  const handleSend = (e) => {\n    e.preventDefault();\n    if(typedMsg!=''){\n       \n    if (!selectedContact || !user) return;\n\n    socket.emit('privateMsg', { data: { sender: user._id, receiver: selectedContact._id, message: typedMsg } });\n\n    const newMessage = {\n      receiver: selectedContact._id,\n      sender: user._id,\n      message: typedMsg,\n    };\n\n    setTypedMsg('');\n    setMsgData((previousMsgData) => [...previousMsgData, newMessage]);\n    }\n   \n  };\n\n  const selectContact = async (contact) => {\n    const data = await loadMsg(contact._id);\n    setTypedMsg('');\n    setSearchTerm('');\n    setSearchedResult([])\n    setMsgData(data.messageArray);\n    setSelectedContact(contact);\n  };\n  if(loading==true)\n    return <LoadingPage/>\n    \n      return (\n        <div className='bg-gradient-to-r from-gray-400 to-gray-200 flex justify-center items-center min-h-screen'>\n          <div className=\"flex flex-col h-[85vh] bg-gradient-to-r from-gray-400 to-gray-200 rounded-lg shadow-[0_10px_20px_rgba(255,0,0,1)] p-6 w-full max-w-6xl\">\n            <div className=\"top bg-gradient-to-r from-gray-400 to-gray-200 p-4 rounded-t-lg flex justify-between items-center flex-col sm:flex-row\">\n              <label className=\"text-white text-lg font-semibold\">Welcome {user.fName}</label>\n              <form className=\"searchForm flex items-center relative mt-2\" onSubmit={handleSearch} id=\"searchForm\">\n                <input\n                  className=\"p-2 rounded-l-lg bg-gray-100 text-black focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  type=\"text\"\n                  placeholder=\"Search\"\n                  value={searchTerm}\n                  onChange={handleSearchSuggestion}\n                  id=\"searchBox\"\n                  name=\"user\"\n                />\n                <button type=\"submit\" id=\"searchBtn\" className=\"bg-blue-600 text-white p-2 rounded-r-lg hover:bg-blue-700 transition-colors\">\n                  Search\n                </button>\n                <div className=\"searchResult absolute bg-gray-700 text-white top-11 rounded-lg shadow-lg w-full\">\n                  {\n                    searchedResult.map((user)=>(\n                      <button key={user._id} className=\" bg-gray-300 w-full text-left text-blue-500 rounded hover:text-blue-700 p-4 border\" \n\n                      onClick={() =>  {\n                        console.log(\"hey q\");\n                        selectContact(user)\n                       }}>\n                      {user.fName} {user.lName}\n                  </button>\n                    ))\n                  }\n                </div>\n              </form>\n            </div>\n            <div className=\"main flex flex-row flex-grow w-full\">\n              <div className=\"sidebar bg-gray-100 h-full w-1/3 sm:w-1/4 p-4 flex flex-col  rounded-l-lg overflow-y-auto\">\n                <div className=\"sidebar-header mb-4 \">\n                  <h2 className=\"text-gray-700 text-lg font-semibold\">Contacts</h2>\n                </div>\n                <div className=\"flex-grow h-2 overflow-y-auto\">\n                  {chatArray.map((user) => (\n                    <div key={user._id} className=\"contact flex items-center mb-4 p-1 sm:p-2 bg-white rounded-lg shadow-xl\">\n                      <img src={avatar} alt=\"Avatar\" className=\"rounded-full w-4 h-4 sm:w-12 sm:h-12 \" />\n                      <form className=\"flex-grow ml-1 sm:ml-4\" onSubmit={(e) => { e.preventDefault(); selectContact(user); }}>\n                        <button type=\"submit\" className=\"text-gray-800 font-semibold hover:text-blue-500 transition-colors text-xs sm:text-xl\">\n                          {user.fName} {user.lName}\n                        </button>\n                      </form>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div id=\"chat-area\" className=\" bg-gradient-to-r from-gray-200 to-white p-6 rounded-r-lg flex flex-col flex-grow w-2/3 sm:w-3/4 lg:mt-0 \">\n                {selectedContact ? (\n                  <div className='flex flex-grow flex-col '>\n                  <p>Chat with: {selectedContact.fName}</p>\n                  <div className='flex-grow flex flex-col h-1 overflow-y-auto  mt-2 mb-2'>\n                    {msgData.map((msg)=>(\n\n                        msg.sender === user._id?(\n                        <div key={msg._id} className='bg-gray-300 m-1 sm:m-4 text-xs sm:text-lg   p-1 sm:p-3 self-end rounded w-fit break-words max-w-[60%] ' >{msg.message}</div>\n                        ):(\n                        <div key={msg._id} className='bg-gray-300 m-1 sm:m-4 text-xs sm:text-lg   p-1 sm:p-3  rounded w-fit break-words max-w-[60%] ' >{msg.message}</div>\n                        )\n                ))} \n                <div ref={messagesEndRef}></div>\n                  </div>\n                  <form className=\"searchForm flex items-center relative mt-2 sm:mt-0 w-full\" onSubmit={handleSend} id=\"searchForm\">\n                <input\n                  className=\"p-2 grow w-20 text-xs sm:text-lg rounded-l-lg border bg-gray-200 text-black focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  type=\"text\"\n                  placeholder=\"Type your msg here\"\n                  value={typedMsg}\n                  onChange={(e)=>setTypedMsg(e.target.value)}\n                  id=\"msgBox\"\n                  name=\"msg\"\n                />\n                <button type=\"submit\" id=\"sendBtn\" className=\"bg-blue-600 text-white p-2 rounded-r-lg hover:bg-blue-700 transition-colors\">\n                  Send\n                </button>\n              </form>\n                  </div>\n                  \n               \n                ) : (\n                  <p>Select a contact to start chatting</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    };\n    \n    export default Home;\n    \n"],"names":["socket","io","_ref","setisVerified","searchTerm","setSearchTerm","useState","typedMsg","setTypedMsg","selectedContact","setSelectedContact","searchedResult","setSearchedResult","chatArray","setChatArray","user","setUser","msgData","setMsgData","messagesEndRef","useRef","loading","setLoading","useEffect","_messagesEndRef$curre","current","scrollIntoView","behavior","async","userData","loadChat","emit","userid","_id","fetchUserData","on","data","sender","newMessage","receiver","message","previousMsgData","off","selectContact","loadMsg","contact","messageArray","_jsx","LoadingPage","className","children","_jsxs","fName","onSubmit","e","preventDefault","id","type","placeholder","value","onChange","target","trim","searchSuggestion","name","map","onClick","console","log","lName","src","avatar","alt","msg","ref"],"sourceRoot":""}